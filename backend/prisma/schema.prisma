// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  @@map("users")
  id Int  @id() @default(autoincrement())
  fullname String
  email String @unique
  mobile String @unique
  address String
  password String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  carts Cart[]
  
}
model Seller{
  @@map("sellers")
  id Int @id() @default(autoincrement()) 
  fullname String
  email String @unique()
  phone_no String @unique()
  pan_no String @unique()
  shop_name String
  shop_type Shop_Type @default(wholesale)
  address String
  password String 
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  products Product[]


}

model Product{
  @@map("products")
  id Int @id() @default(autoincrement())
  seller_id Int
  name String
  quantity Int
  category String
  image String
  description String
  price Float
  is_active Boolean @default(true)
  seller Seller @relation(references: [id], fields: [seller_id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  carts Cart[]
}

model Cart{
  @@map("carts")
  id Int @id() @default(autoincrement())
  user_id Int
  product_id Int 
  quantity Int
  product Product @relation(fields: [product_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())


}
model Order{
  @@map("orders")
  id Int @id() @default(autoincrement())
  user_id Int
  product_id Int
  quantity Int
  order_status Order_Status @default(pending)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  orderItems Order_Item[]
  payment Payment[]

}
model Order_Item{
  @@map("orderItems")
  id Int @id() @default(autoincrement())
  order_id Int
  order Order @relation(references: [id], fields: [order_id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

}
model Payment{
  @@map("payments")
  id Int @id() @default(autoincrement())
  order_id Int
  order Order @relation(fields: [order_id], references: [id])
  payment_type Payment_Type @default(cash)
  payment_status Payment_Status @default(pending)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

}
enum Order_Status{
  pending
  shipped
  delivered
  cancelled
}
enum Payment_Type{
  cash
  online
  cheque
}
enum Payment_Status{
  pending
  failed
  completed
}
enum Shop_Type{
  wholesale
  retail
}